
( system calls )

: emit    0 sys ;
: .       1 sys ;
: tell    2 sys ;
: quit    128 sys ;
: sin     129 sys ;
: include 130 sys ;
: save    131 sys ;

( custom system calls )

( COMMON )

( when b32in is called, next number pushed is interpreted as base32 and puts addr on stack )
: b32in   ( reg -- )					132 sys ;
: b32tell ( reg -- )					133 sys ;
: shstat  ( -- status )					134 sys ;
: symkeygen ( key -- ) 					135 sys ;
: hydroe ( c mlen m msgid key -- ) 			136 sys ;
: hydrod ( c m msgid key -- t=mlen f=0 ) 		137 sys ;
: memzero ( buffer -- ) 				138 sys ;
: rfill ( buffer -- ) 					139 sys ;
: hydrokdf ( subkey subkeyid masterkey -- ) 		140 sys ;
: memcpy ( dest src -- ) 				141 sys ;

( COMMON W/ DIFFERENT IMPLEMENTATIONS )

: getrand ( random -- )					149 sys ;
: sign    ( digest prislot sig -- )			150 sys ;
: verify  ( digest pubslot sig -- pass)			151 sys ;
: ecdh    ( pubkey prislot sharsec -- )			152 sys ;
: genkey  ( prikey pubkey -- ) 				153 sys ;

( DEVICE )

: counter ( -- curval )					154 sys ;
: cntrinc ( -- curval )					155 sys ;
: getpub  ( slot pubkey -- )				156 sys ;
: setpub  ( slot pubkey -- )				157 sys ;
: getser  ( serial -- )					158 sys ;
: rot1    ( seed randout pubkey -- keyconf slotconf)	159 sys ;
: rot3    ( valid verdata gendata sig -- ver)		160 sys ;
: readpub  ( slot pubkey -- )				161 sys ;

: 32< b32in ;
: 32> b32tell ;

( SERVER )

: sha256i  ( -- ) 179 sys ;
: sha256u  ( buffer -- ) 180 sys ;
: sha256f  ( digest -- ) 181 sys ;
: rot2 ( valid seed randout pubkey serial slotconf keyconf gendata verdata digest -- ) 182 sys ;


( dictionary access. These are shortcuts through the primitive operations are !!, @@ and ,, )

: !    0 !! ;
: @    0 @@ ;
: ,    0 ,, ;
: #    0 ## ;

( typed dictionary access for single byte operations )
: !u8 2 !! ;
: @u8 2 @@ ;
: ,u8 2 ,, ;


( compiler state )

: [ 0 compiling ! ; immediate
: ] 1 compiling ! ;
: postpone 1 _postpone ! ; immediate


( some operators and shortcuts )

: over 1 pick ;
: +!   dup @ rot + swap ! ;
: inc  1 swap +! ;
: dec  -1 swap +! ;
: <    - <0 ;
: >    swap < ;
: <=   over over >r >r < r> r> = + ;
: >=   swap <= ;
: =0   0 = ;
: not  =0 ;
: !=   = not ;
: cr   10 emit ;
: ..   dup . ;
: here h @ ;


( memory management )

: allot  h +!  ;
: var : postpone [ ' lit , here dup 5 + , ' exit , here swap ! 5 allot ;


( 'begin' gets the current address, a jump or conditional jump back is generated
  by 'again', 'until' or 'times' )

: begin   here ; immediate
: again   ' jmp , , ; immediate
: until   ' jmp0 , , ; immediate
: times ' 1 - , ' dup , ' =0 , postpone until ; immediate


( 'if' prepares conditional jump, address will be filled in by 'else' or 'fi' )

: if      ' jmp0 , here 999 , ; immediate
: unless  ' not , postpone if ; immediate
: else    ' jmp , here 999 , swap here swap ! ; immediate
: fi      here swap ! ; immediate


( forth style 'do' and 'loop', including loop iterators 'i' and 'j' )

: i ' lit , 0 , ' pickr , ; immediate
: j ' lit , 2 , ' pickr , ; immediate
: do ' swap , ' >r , ' >r , here ; immediate
: loop+ ' r> , ' + , ' dup , ' >r , ' lit , 1 , ' pickr , ' > , ' jmp0 , , ' r> , ' drop , ' r> , ' drop , ; immediate
: loop ' lit , 1 , postpone loop+ ;  immediate


( Create string literal, puts length and address on the stack )

: s" compiling @ if ' lits , here 0 , fi here begin key dup 34 = if drop
     compiling @ if here swap - swap ! else dup here swap - fi exit else , fi
     again ; immediate

( Print string literal )

: ." compiling @ if postpone s" ' tell , else begin key dup 34 = if drop exit else emit fi again
     fi ; immediate

( crypto registers for big numbers )

var pub 64 1 + allot
var pri 32 1 + allot
var sig 64 1 + allot
var ran 32 1 + allot
var dig 32 1 + allot

var shs 32 1 + allot
var ser 9 1 + allot
var ver 19 1 + allot
var gen 3 1 + allot
var see 20 1 + allot

var c 64 1 + allot
var m 28 1 + allot
var k 32 1 + allot


( setting size byte )
64 pub !u8
64 sig !u8
32 ran !u8
32 dig !u8
32 pri !u8
32 shs !u8
9  ser !u8
19 ver !u8
3  gen !u8
20 see !u8

64 c !u8
28 m !u8
32 k !u8

( command output wrappers )
: rot1c rot1 ser getser 0 . ." see 32< " see 32> ." ran 32< " ran 32> ." pub 32< " pub 32> ." ser 32< " ser 32> . . ." gen ver dig rot2"  ;


( methods for handling the dictionary )

( 'next' increases the given dictionary address by the size of the cell
  located at that address )

: next dup # + ;

( 'words' generates a list of all define words )

: name dup @ 31 & swap next dup next rot tell @ ;
: words latest @ begin name 32 emit dup 0 = until cr drop ;

(
vi: ts=3 sw=3 ft=forth
)

